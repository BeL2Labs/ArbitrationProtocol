enum DAppStatus {
    Unknown
    None
    Pending
    Active
    Suspended
    Terminated
}

enum TransactionStatus {
    Unknown
    Active
    Completed
    Arbitrated
    Expired
    Disputed
    Submitted
}

enum CompensationType {
    Unknown
    IllegalSignature
    Timeout
    FailedArbitration
    ArbiterFee
}

type ArbiterInfo @entity {
    id: ID! # required by the graph
    createdAt: Int! # Timestamp, DB side only, not on chain - block time at which the arbiter info was first found (first event)
    deadLine: Int # Timestamp at which this arbiter term ends
    address: String! @id # Arbiter Ethereum address
    currentFeeRate: Int # Current fee rate
    pendingFeeRate: Int # Pending new fee rate
    paused: Boolean! # Whether the arbiter is manually paused or not
    activeTransactionId: String # ID of the transaction that made the arbiter "working". 0 address if not working.
    ethAmount: BigInt! # Native token stake amount
    nftValue: BigInt! # Amount of native coins locked in the staked NFTs
    erc20Token: String # ERC20 token address
    nftContract: String # NFT contract address
    nftTokenIds: [BigInt!] # NFT token IDs
    lastSubmittedWorkTime: Int
    
    # Operator
    operatorEvmAddress: String # Operator EVM address
    operatorBtcPubKey: String # Bitcoin public key
    operatorBtcAddress: String # Bitcoin address

    # Revenue
    revenueEvmAddress: String # Revenue EVM address
    revenueBtcPubKey: String # Bitcoin public key
    revenueBtcAddress: String # Bitcoin address

    # Computed on the subgraph side
    isActive: Boolean 
}

type Transaction @entity {
    id: ID! # required by the graph
    createdAt: Int! # Timestamp, DB side only, not on chain - block time at which the transaction was first found (first event)
    txId: String! # Transaction ID, same as ID
    dapp: String # DApp address
    arbiter: String
    startTime: Int
    deadline: Int
    status: TransactionStatus!
    depositedFee: BigInt
    arbitratorFee: BigInt
    refundedFee: BigInt
    systemFee: BigInt
    signature: String # Arbiter's signature
    compensationReceiver: String
    timeoutCompensationReceiver: String
    # utxos: String # TBD: JSON string?
    script: String
    requestArbitrationTime: Int
}

type ArbitrationRequest @entity {
    id: ID!
    txId: BigInt!
    requester: String!
    requestTime: Int!
    deadline: Int!
    timeoutCompensationReceiver: String!
    fulfilled: Boolean!
}

type CompensationClaim @entity {
    id: ID!
    createdAt: Int! # Timestamp, DB side only, not on chain - block time at which the compensation was first found (first event)
    claimType: CompensationType!
    claimer: String
    arbiter: String 
    ethAmount: BigInt
    totalAmount: BigInt
    receivedCompensationAddress: String # Who receives the compensation
    withdrawn: Boolean!
    systemFee: BigInt
    excessPaymentToClaimer: BigInt
}

type DApp @entity {
    id: ID!
    createdAt: Int! # Timestamp, DB side only, not on chain - block time at which the dapp was first found (first event)
    address: String!
    owner: String
    status: DAppStatus!
}

type BPosNFT @entity {
    id: ID!
    createdAt: Int! # Timestamp, DB side only, not on chain - block time at which the bpos nft was first found (first event)
    owner: String! # EVM address
    tokenId: BigInt!
}

# One entry per config key: min stake, tx duration, etc.
type ConfigEntry @entity {
    id: ID!
    key: String! # same as id - key provided by the contract event. eg MIN_STAKE, ARBITRATION_TIMEOUT, etc
    value: BigInt!
}