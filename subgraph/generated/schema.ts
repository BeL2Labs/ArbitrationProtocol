// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class ArbitratorInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ArbitratorInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ArbitratorInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ArbitratorInfo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ArbitratorInfo | null {
    return changetype<ArbitratorInfo | null>(
      store.get_in_block("ArbitratorInfo", id),
    );
  }

  static load(id: string): ArbitratorInfo | null {
    return changetype<ArbitratorInfo | null>(store.get("ArbitratorInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get lastArbitrationTime(): BigInt | null {
    let value = this.get("lastArbitrationTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastArbitrationTime(value: BigInt | null) {
    if (!value) {
      this.unset("lastArbitrationTime");
    } else {
      this.set("lastArbitrationTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get currentFeeRate(): BigInt | null {
    let value = this.get("currentFeeRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set currentFeeRate(value: BigInt | null) {
    if (!value) {
      this.unset("currentFeeRate");
    } else {
      this.set("currentFeeRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get pendingFeeRate(): BigInt | null {
    let value = this.get("pendingFeeRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set pendingFeeRate(value: BigInt | null) {
    if (!value) {
      this.unset("pendingFeeRate");
    } else {
      this.set("pendingFeeRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get activeTransactionId(): Bytes | null {
    let value = this.get("activeTransactionId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set activeTransactionId(value: Bytes | null) {
    if (!value) {
      this.unset("activeTransactionId");
    } else {
      this.set("activeTransactionId", Value.fromBytes(<Bytes>value));
    }
  }

  get ethAmount(): BigInt {
    let value = this.get("ethAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ethAmount(value: BigInt) {
    this.set("ethAmount", Value.fromBigInt(value));
  }

  get erc20Token(): string | null {
    let value = this.get("erc20Token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set erc20Token(value: string | null) {
    if (!value) {
      this.unset("erc20Token");
    } else {
      this.set("erc20Token", Value.fromString(<string>value));
    }
  }

  get nftContract(): string | null {
    let value = this.get("nftContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftContract(value: string | null) {
    if (!value) {
      this.unset("nftContract");
    } else {
      this.set("nftContract", Value.fromString(<string>value));
    }
  }

  get nftTokenIds(): Array<BigInt> | null {
    let value = this.get("nftTokenIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set nftTokenIds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("nftTokenIds");
    } else {
      this.set("nftTokenIds", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get operatorEvmAddress(): string | null {
    let value = this.get("operatorEvmAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set operatorEvmAddress(value: string | null) {
    if (!value) {
      this.unset("operatorEvmAddress");
    } else {
      this.set("operatorEvmAddress", Value.fromString(<string>value));
    }
  }

  get operatorBtcPubKey(): string | null {
    let value = this.get("operatorBtcPubKey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set operatorBtcPubKey(value: string | null) {
    if (!value) {
      this.unset("operatorBtcPubKey");
    } else {
      this.set("operatorBtcPubKey", Value.fromString(<string>value));
    }
  }

  get operatorBtcAddress(): string | null {
    let value = this.get("operatorBtcAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set operatorBtcAddress(value: string | null) {
    if (!value) {
      this.unset("operatorBtcAddress");
    } else {
      this.set("operatorBtcAddress", Value.fromString(<string>value));
    }
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Transaction | null {
    return changetype<Transaction | null>(
      store.get_in_block("Transaction", id),
    );
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dapp(): string {
    let value = this.get("dapp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set dapp(value: string) {
    this.set("dapp", Value.fromString(value));
  }

  get arbitrator(): string {
    let value = this.get("arbitrator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set arbitrator(value: string) {
    this.set("arbitrator", Value.fromString(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get btcTx(): Bytes {
    let value = this.get("btcTx");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set btcTx(value: Bytes) {
    this.set("btcTx", Value.fromBytes(value));
  }

  get btcTxHash(): Bytes {
    let value = this.get("btcTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set btcTxHash(value: Bytes) {
    this.set("btcTxHash", Value.fromBytes(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get depositedFee(): BigInt {
    let value = this.get("depositedFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set depositedFee(value: BigInt) {
    this.set("depositedFee", Value.fromBigInt(value));
  }

  get signature(): Bytes | null {
    let value = this.get("signature");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set signature(value: Bytes | null) {
    if (!value) {
      this.unset("signature");
    } else {
      this.set("signature", Value.fromBytes(<Bytes>value));
    }
  }

  get compensationReceiver(): string | null {
    let value = this.get("compensationReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set compensationReceiver(value: string | null) {
    if (!value) {
      this.unset("compensationReceiver");
    } else {
      this.set("compensationReceiver", Value.fromString(<string>value));
    }
  }

  get timeoutCompensationReceiver(): string | null {
    let value = this.get("timeoutCompensationReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timeoutCompensationReceiver(value: string | null) {
    if (!value) {
      this.unset("timeoutCompensationReceiver");
    } else {
      this.set("timeoutCompensationReceiver", Value.fromString(<string>value));
    }
  }
}

export class ArbitrationRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ArbitrationRequest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ArbitrationRequest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ArbitrationRequest", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ArbitrationRequest | null {
    return changetype<ArbitrationRequest | null>(
      store.get_in_block("ArbitrationRequest", id),
    );
  }

  static load(id: string): ArbitrationRequest | null {
    return changetype<ArbitrationRequest | null>(
      store.get("ArbitrationRequest", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txId(): BigInt {
    let value = this.get("txId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set txId(value: BigInt) {
    this.set("txId", Value.fromBigInt(value));
  }

  get requester(): string {
    let value = this.get("requester");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set requester(value: string) {
    this.set("requester", Value.fromString(value));
  }

  get requestTime(): BigInt {
    let value = this.get("requestTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set requestTime(value: BigInt) {
    this.set("requestTime", Value.fromBigInt(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get timeoutCompensationReceiver(): string {
    let value = this.get("timeoutCompensationReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set timeoutCompensationReceiver(value: string) {
    this.set("timeoutCompensationReceiver", Value.fromString(value));
  }

  get fulfilled(): boolean {
    let value = this.get("fulfilled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set fulfilled(value: boolean) {
    this.set("fulfilled", Value.fromBoolean(value));
  }
}

export class CompensationClaim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CompensationClaim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CompensationClaim must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CompensationClaim", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CompensationClaim | null {
    return changetype<CompensationClaim | null>(
      store.get_in_block("CompensationClaim", id),
    );
  }

  static load(id: string): CompensationClaim | null {
    return changetype<CompensationClaim | null>(
      store.get("CompensationClaim", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get arbitrator(): string {
    let value = this.get("arbitrator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set arbitrator(value: string) {
    this.set("arbitrator", Value.fromString(value));
  }

  get claimer(): string {
    let value = this.get("claimer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set claimer(value: string) {
    this.set("claimer", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get claimType(): string {
    let value = this.get("claimType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set claimType(value: string) {
    this.set("claimType", Value.fromString(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get evidence(): Bytes {
    let value = this.get("evidence");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evidence(value: Bytes) {
    this.set("evidence", Value.fromBytes(value));
  }
}
