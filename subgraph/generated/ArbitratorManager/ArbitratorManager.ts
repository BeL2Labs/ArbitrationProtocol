// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ArbitratorDeadlineUpdated extends ethereum.Event {
  get params(): ArbitratorDeadlineUpdated__Params {
    return new ArbitratorDeadlineUpdated__Params(this);
  }
}

export class ArbitratorDeadlineUpdated__Params {
  _event: ArbitratorDeadlineUpdated;

  constructor(event: ArbitratorDeadlineUpdated) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deadline(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ArbitratorFeeRateUpdated extends ethereum.Event {
  get params(): ArbitratorFeeRateUpdated__Params {
    return new ArbitratorFeeRateUpdated__Params(this);
  }
}

export class ArbitratorFeeRateUpdated__Params {
  _event: ArbitratorFeeRateUpdated;

  constructor(event: ArbitratorFeeRateUpdated) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ethFeeRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get btcFeeRate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ArbitratorFrozen extends ethereum.Event {
  get params(): ArbitratorFrozen__Params {
    return new ArbitratorFrozen__Params(this);
  }
}

export class ArbitratorFrozen__Params {
  _event: ArbitratorFrozen;

  constructor(event: ArbitratorFrozen) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ArbitratorPaused extends ethereum.Event {
  get params(): ArbitratorPaused__Params {
    return new ArbitratorPaused__Params(this);
  }
}

export class ArbitratorPaused__Params {
  _event: ArbitratorPaused;

  constructor(event: ArbitratorPaused) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ArbitratorRegistered extends ethereum.Event {
  get params(): ArbitratorRegistered__Params {
    return new ArbitratorRegistered__Params(this);
  }
}

export class ArbitratorRegistered__Params {
  _event: ArbitratorRegistered;

  constructor(event: ArbitratorRegistered) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get revenueAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get btcAddress(): string {
    return this._event.parameters[3].value.toString();
  }

  get btcPubKey(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get feeRate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get btcFeeRate(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class ArbitratorReleased extends ethereum.Event {
  get params(): ArbitratorReleased__Params {
    return new ArbitratorReleased__Params(this);
  }
}

export class ArbitratorReleased__Params {
  _event: ArbitratorReleased;

  constructor(event: ArbitratorReleased) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get transactionId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class ArbitratorTerminatedWithSlash extends ethereum.Event {
  get params(): ArbitratorTerminatedWithSlash__Params {
    return new ArbitratorTerminatedWithSlash__Params(this);
  }
}

export class ArbitratorTerminatedWithSlash__Params {
  _event: ArbitratorTerminatedWithSlash;

  constructor(event: ArbitratorTerminatedWithSlash) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ArbitratorUnpaused extends ethereum.Event {
  get params(): ArbitratorUnpaused__Params {
    return new ArbitratorUnpaused__Params(this);
  }
}

export class ArbitratorUnpaused__Params {
  _event: ArbitratorUnpaused;

  constructor(event: ArbitratorUnpaused) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ArbitratorWorking extends ethereum.Event {
  get params(): ArbitratorWorking__Params {
    return new ArbitratorWorking__Params(this);
  }
}

export class ArbitratorWorking__Params {
  _event: ArbitratorWorking;

  constructor(event: ArbitratorWorking) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get transactionId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class AssetManagerUpdated extends ethereum.Event {
  get params(): AssetManagerUpdated__Params {
    return new AssetManagerUpdated__Params(this);
  }
}

export class AssetManagerUpdated__Params {
  _event: AssetManagerUpdated;

  constructor(event: AssetManagerUpdated) {
    this._event = event;
  }

  get assetManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CompensationManagerUpdated extends ethereum.Event {
  get params(): CompensationManagerUpdated__Params {
    return new CompensationManagerUpdated__Params(this);
  }
}

export class CompensationManagerUpdated__Params {
  _event: CompensationManagerUpdated;

  constructor(event: CompensationManagerUpdated) {
    this._event = event;
  }

  get oldManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ConfigManagerUpdated extends ethereum.Event {
  get params(): ConfigManagerUpdated__Params {
    return new ConfigManagerUpdated__Params(this);
  }
}

export class ConfigManagerUpdated__Params {
  _event: ConfigManagerUpdated;

  constructor(event: ConfigManagerUpdated) {
    this._event = event;
  }

  get newConfigManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OperatorSet extends ethereum.Event {
  get params(): OperatorSet__Params {
    return new OperatorSet__Params(this);
  }
}

export class OperatorSet__Params {
  _event: OperatorSet;

  constructor(event: OperatorSet) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get btcPubKey(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get btcAddress(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RevenueAddressesSet extends ethereum.Event {
  get params(): RevenueAddressesSet__Params {
    return new RevenueAddressesSet__Params(this);
  }
}

export class RevenueAddressesSet__Params {
  _event: RevenueAddressesSet;

  constructor(event: RevenueAddressesSet) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ethAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get btcPubKey(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get btcAddress(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class StakeAdded extends ethereum.Event {
  get params(): StakeAdded__Params {
    return new StakeAdded__Params(this);
  }
}

export class StakeAdded__Params {
  _event: StakeAdded;

  constructor(event: StakeAdded) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assetAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get nftTokenIds(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class StakeWithdrawn extends ethereum.Event {
  get params(): StakeWithdrawn__Params {
    return new StakeWithdrawn__Params(this);
  }
}

export class StakeWithdrawn__Params {
  _event: StakeWithdrawn;

  constructor(event: StakeWithdrawn) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ethAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get erc20Address(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get erc20Amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get nftAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get nftTokenIds(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }
}

export class TransactionManagerUpdated extends ethereum.Event {
  get params(): TransactionManagerUpdated__Params {
    return new TransactionManagerUpdated__Params(this);
  }
}

export class TransactionManagerUpdated__Params {
  _event: TransactionManagerUpdated;

  constructor(event: TransactionManagerUpdated) {
    this._event = event;
  }

  get oldManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ArbitratorManager__getArbitratorAssetsResultValue0Struct extends ethereum.Tuple {
  get ethAmount(): BigInt {
    return this[0].toBigInt();
  }

  get erc20Token(): Address {
    return this[1].toAddress();
  }

  get erc20Amount(): BigInt {
    return this[2].toBigInt();
  }

  get nftContract(): Address {
    return this[3].toAddress();
  }

  get nftTokenIds(): Array<BigInt> {
    return this[4].toBigIntArray();
  }
}

export class ArbitratorManager__getArbitratorBasicInfoResultValue0Struct extends ethereum.Tuple {
  get arbitrator(): Address {
    return this[0].toAddress();
  }

  get paused(): boolean {
    return this[1].toBoolean();
  }

  get registerTime(): BigInt {
    return this[2].toBigInt();
  }

  get deadline(): BigInt {
    return this[3].toBigInt();
  }
}

export class ArbitratorManager__getArbitratorOperationInfoResultValue0Struct extends ethereum.Tuple {
  get operator(): Address {
    return this[0].toAddress();
  }

  get operatorBtcPubKey(): Bytes {
    return this[1].toBytes();
  }

  get operatorBtcAddress(): string {
    return this[2].toString();
  }

  get activeTransactionId(): Bytes {
    return this[3].toBytes();
  }

  get lastSubmittedWorkTime(): BigInt {
    return this[4].toBigInt();
  }
}

export class ArbitratorManager__getArbitratorRevenueInfoResultValue0Struct extends ethereum.Tuple {
  get currentFeeRate(): BigInt {
    return this[0].toBigInt();
  }

  get currentBTCFeeRate(): BigInt {
    return this[1].toBigInt();
  }

  get revenueBtcPubKey(): Bytes {
    return this[2].toBytes();
  }

  get revenueBtcAddress(): string {
    return this[3].toString();
  }

  get revenueETHAddress(): Address {
    return this[4].toAddress();
  }
}

export class ArbitratorManager extends ethereum.SmartContract {
  static bind(address: Address): ArbitratorManager {
    return new ArbitratorManager("ArbitratorManager", address);
  }

  assetManager(): Address {
    let result = super.call("assetManager", "assetManager():(address)", []);

    return result[0].toAddress();
  }

  try_assetManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("assetManager", "assetManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  compensationManager(): Address {
    let result = super.call(
      "compensationManager",
      "compensationManager():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_compensationManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "compensationManager",
      "compensationManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  configManager(): Address {
    let result = super.call("configManager", "configManager():(address)", []);

    return result[0].toAddress();
  }

  try_configManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "configManager",
      "configManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getArbitratorAssets(
    arbitrator: Address,
  ): ArbitratorManager__getArbitratorAssetsResultValue0Struct {
    let result = super.call(
      "getArbitratorAssets",
      "getArbitratorAssets(address):((uint256,address,uint256,address,uint256[]))",
      [ethereum.Value.fromAddress(arbitrator)],
    );

    return changetype<ArbitratorManager__getArbitratorAssetsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getArbitratorAssets(
    arbitrator: Address,
  ): ethereum.CallResult<ArbitratorManager__getArbitratorAssetsResultValue0Struct> {
    let result = super.tryCall(
      "getArbitratorAssets",
      "getArbitratorAssets(address):((uint256,address,uint256,address,uint256[]))",
      [ethereum.Value.fromAddress(arbitrator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ArbitratorManager__getArbitratorAssetsResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getArbitratorBasicInfo(
    arbitrator: Address,
  ): ArbitratorManager__getArbitratorBasicInfoResultValue0Struct {
    let result = super.call(
      "getArbitratorBasicInfo",
      "getArbitratorBasicInfo(address):((address,bool,uint256,uint256))",
      [ethereum.Value.fromAddress(arbitrator)],
    );

    return changetype<ArbitratorManager__getArbitratorBasicInfoResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getArbitratorBasicInfo(
    arbitrator: Address,
  ): ethereum.CallResult<ArbitratorManager__getArbitratorBasicInfoResultValue0Struct> {
    let result = super.tryCall(
      "getArbitratorBasicInfo",
      "getArbitratorBasicInfo(address):((address,bool,uint256,uint256))",
      [ethereum.Value.fromAddress(arbitrator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ArbitratorManager__getArbitratorBasicInfoResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getArbitratorOperationInfo(
    arbitrator: Address,
  ): ArbitratorManager__getArbitratorOperationInfoResultValue0Struct {
    let result = super.call(
      "getArbitratorOperationInfo",
      "getArbitratorOperationInfo(address):((address,bytes,string,bytes32,uint256))",
      [ethereum.Value.fromAddress(arbitrator)],
    );

    return changetype<ArbitratorManager__getArbitratorOperationInfoResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getArbitratorOperationInfo(
    arbitrator: Address,
  ): ethereum.CallResult<ArbitratorManager__getArbitratorOperationInfoResultValue0Struct> {
    let result = super.tryCall(
      "getArbitratorOperationInfo",
      "getArbitratorOperationInfo(address):((address,bytes,string,bytes32,uint256))",
      [ethereum.Value.fromAddress(arbitrator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ArbitratorManager__getArbitratorOperationInfoResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getArbitratorRevenueInfo(
    arbitrator: Address,
  ): ArbitratorManager__getArbitratorRevenueInfoResultValue0Struct {
    let result = super.call(
      "getArbitratorRevenueInfo",
      "getArbitratorRevenueInfo(address):((uint256,uint256,bytes,string,address))",
      [ethereum.Value.fromAddress(arbitrator)],
    );

    return changetype<ArbitratorManager__getArbitratorRevenueInfoResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getArbitratorRevenueInfo(
    arbitrator: Address,
  ): ethereum.CallResult<ArbitratorManager__getArbitratorRevenueInfoResultValue0Struct> {
    let result = super.tryCall(
      "getArbitratorRevenueInfo",
      "getArbitratorRevenueInfo(address):((uint256,uint256,bytes,string,address))",
      [ethereum.Value.fromAddress(arbitrator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ArbitratorManager__getArbitratorRevenueInfoResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getAvailableStake(arbitrator: Address): BigInt {
    let result = super.call(
      "getAvailableStake",
      "getAvailableStake(address):(uint256)",
      [ethereum.Value.fromAddress(arbitrator)],
    );

    return result[0].toBigInt();
  }

  try_getAvailableStake(arbitrator: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableStake",
      "getAvailableStake(address):(uint256)",
      [ethereum.Value.fromAddress(arbitrator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBtcFee(duration: BigInt, arbitrator: Address): BigInt {
    let result = super.call(
      "getBtcFee",
      "getBtcFee(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(duration),
        ethereum.Value.fromAddress(arbitrator),
      ],
    );

    return result[0].toBigInt();
  }

  try_getBtcFee(
    duration: BigInt,
    arbitrator: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBtcFee",
      "getBtcFee(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(duration),
        ethereum.Value.fromAddress(arbitrator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFee(duration: BigInt, arbitrator: Address): BigInt {
    let result = super.call("getFee", "getFee(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(duration),
      ethereum.Value.fromAddress(arbitrator),
    ]);

    return result[0].toBigInt();
  }

  try_getFee(
    duration: BigInt,
    arbitrator: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getFee", "getFee(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(duration),
      ethereum.Value.fromAddress(arbitrator),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isActiveArbitrator(arbitratorAddress: Address): boolean {
    let result = super.call(
      "isActiveArbitrator",
      "isActiveArbitrator(address):(bool)",
      [ethereum.Value.fromAddress(arbitratorAddress)],
    );

    return result[0].toBoolean();
  }

  try_isActiveArbitrator(
    arbitratorAddress: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isActiveArbitrator",
      "isActiveArbitrator(address):(bool)",
      [ethereum.Value.fromAddress(arbitratorAddress)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isConfigModifiable(arbitrator: Address): boolean {
    let result = super.call(
      "isConfigModifiable",
      "isConfigModifiable(address):(bool)",
      [ethereum.Value.fromAddress(arbitrator)],
    );

    return result[0].toBoolean();
  }

  try_isConfigModifiable(arbitrator: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isConfigModifiable",
      "isConfigModifiable(address):(bool)",
      [ethereum.Value.fromAddress(arbitrator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFrozenStatus(arbitrator: Address): boolean {
    let result = super.call(
      "isFrozenStatus",
      "isFrozenStatus(address):(bool)",
      [ethereum.Value.fromAddress(arbitrator)],
    );

    return result[0].toBoolean();
  }

  try_isFrozenStatus(arbitrator: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isFrozenStatus",
      "isFrozenStatus(address):(bool)",
      [ethereum.Value.fromAddress(arbitrator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOperatorOf(arbitrator: Address, operator: Address): boolean {
    let result = super.call(
      "isOperatorOf",
      "isOperatorOf(address,address):(bool)",
      [
        ethereum.Value.fromAddress(arbitrator),
        ethereum.Value.fromAddress(operator),
      ],
    );

    return result[0].toBoolean();
  }

  try_isOperatorOf(
    arbitrator: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOperatorOf",
      "isOperatorOf(address,address):(bool)",
      [
        ethereum.Value.fromAddress(arbitrator),
        ethereum.Value.fromAddress(operator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPaused(arbitrator: Address): boolean {
    let result = super.call("isPaused", "isPaused(address):(bool)", [
      ethereum.Value.fromAddress(arbitrator),
    ]);

    return result[0].toBoolean();
  }

  try_isPaused(arbitrator: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused(address):(bool)", [
      ethereum.Value.fromAddress(arbitrator),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transactionManager(): Address {
    let result = super.call(
      "transactionManager",
      "transactionManager():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_transactionManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "transactionManager",
      "transactionManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class FrozenArbitratorCall extends ethereum.Call {
  get inputs(): FrozenArbitratorCall__Inputs {
    return new FrozenArbitratorCall__Inputs(this);
  }

  get outputs(): FrozenArbitratorCall__Outputs {
    return new FrozenArbitratorCall__Outputs(this);
  }
}

export class FrozenArbitratorCall__Inputs {
  _call: FrozenArbitratorCall;

  constructor(call: FrozenArbitratorCall) {
    this._call = call;
  }

  get arbitrator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FrozenArbitratorCall__Outputs {
  _call: FrozenArbitratorCall;

  constructor(call: FrozenArbitratorCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _configManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RegisterArbitratorByStakeERC20Call extends ethereum.Call {
  get inputs(): RegisterArbitratorByStakeERC20Call__Inputs {
    return new RegisterArbitratorByStakeERC20Call__Inputs(this);
  }

  get outputs(): RegisterArbitratorByStakeERC20Call__Outputs {
    return new RegisterArbitratorByStakeERC20Call__Outputs(this);
  }
}

export class RegisterArbitratorByStakeERC20Call__Inputs {
  _call: RegisterArbitratorByStakeERC20Call;

  constructor(call: RegisterArbitratorByStakeERC20Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get defaultBtcAddress(): string {
    return this._call.inputValues[2].value.toString();
  }

  get defaultBtcPubKey(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get feeRate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get btcFeeRate(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class RegisterArbitratorByStakeERC20Call__Outputs {
  _call: RegisterArbitratorByStakeERC20Call;

  constructor(call: RegisterArbitratorByStakeERC20Call) {
    this._call = call;
  }
}

export class RegisterArbitratorByStakeETHCall extends ethereum.Call {
  get inputs(): RegisterArbitratorByStakeETHCall__Inputs {
    return new RegisterArbitratorByStakeETHCall__Inputs(this);
  }

  get outputs(): RegisterArbitratorByStakeETHCall__Outputs {
    return new RegisterArbitratorByStakeETHCall__Outputs(this);
  }
}

export class RegisterArbitratorByStakeETHCall__Inputs {
  _call: RegisterArbitratorByStakeETHCall;

  constructor(call: RegisterArbitratorByStakeETHCall) {
    this._call = call;
  }

  get defaultBtcAddress(): string {
    return this._call.inputValues[0].value.toString();
  }

  get defaultBtcPubKey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get feeRate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get btcFeeRate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class RegisterArbitratorByStakeETHCall__Outputs {
  _call: RegisterArbitratorByStakeETHCall;

  constructor(call: RegisterArbitratorByStakeETHCall) {
    this._call = call;
  }
}

export class RegisterArbitratorByStakeNFTCall extends ethereum.Call {
  get inputs(): RegisterArbitratorByStakeNFTCall__Inputs {
    return new RegisterArbitratorByStakeNFTCall__Inputs(this);
  }

  get outputs(): RegisterArbitratorByStakeNFTCall__Outputs {
    return new RegisterArbitratorByStakeNFTCall__Outputs(this);
  }
}

export class RegisterArbitratorByStakeNFTCall__Inputs {
  _call: RegisterArbitratorByStakeNFTCall;

  constructor(call: RegisterArbitratorByStakeNFTCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get defaultBtcAddress(): string {
    return this._call.inputValues[1].value.toString();
  }

  get defaultBtcPubKey(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get feeRate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get btcFeeRate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class RegisterArbitratorByStakeNFTCall__Outputs {
  _call: RegisterArbitratorByStakeNFTCall;

  constructor(call: RegisterArbitratorByStakeNFTCall) {
    this._call = call;
  }
}

export class ReleaseArbitratorCall extends ethereum.Call {
  get inputs(): ReleaseArbitratorCall__Inputs {
    return new ReleaseArbitratorCall__Inputs(this);
  }

  get outputs(): ReleaseArbitratorCall__Outputs {
    return new ReleaseArbitratorCall__Outputs(this);
  }
}

export class ReleaseArbitratorCall__Inputs {
  _call: ReleaseArbitratorCall;

  constructor(call: ReleaseArbitratorCall) {
    this._call = call;
  }

  get arbitrator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get transactionId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ReleaseArbitratorCall__Outputs {
  _call: ReleaseArbitratorCall;

  constructor(call: ReleaseArbitratorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetArbitratorDeadlineCall extends ethereum.Call {
  get inputs(): SetArbitratorDeadlineCall__Inputs {
    return new SetArbitratorDeadlineCall__Inputs(this);
  }

  get outputs(): SetArbitratorDeadlineCall__Outputs {
    return new SetArbitratorDeadlineCall__Outputs(this);
  }
}

export class SetArbitratorDeadlineCall__Inputs {
  _call: SetArbitratorDeadlineCall;

  constructor(call: SetArbitratorDeadlineCall) {
    this._call = call;
  }

  get deadline(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetArbitratorDeadlineCall__Outputs {
  _call: SetArbitratorDeadlineCall;

  constructor(call: SetArbitratorDeadlineCall) {
    this._call = call;
  }
}

export class SetArbitratorWorkingCall extends ethereum.Call {
  get inputs(): SetArbitratorWorkingCall__Inputs {
    return new SetArbitratorWorkingCall__Inputs(this);
  }

  get outputs(): SetArbitratorWorkingCall__Outputs {
    return new SetArbitratorWorkingCall__Outputs(this);
  }
}

export class SetArbitratorWorkingCall__Inputs {
  _call: SetArbitratorWorkingCall;

  constructor(call: SetArbitratorWorkingCall) {
    this._call = call;
  }

  get arbitrator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get transactionId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetArbitratorWorkingCall__Outputs {
  _call: SetArbitratorWorkingCall;

  constructor(call: SetArbitratorWorkingCall) {
    this._call = call;
  }
}

export class SetAssetManagerCall extends ethereum.Call {
  get inputs(): SetAssetManagerCall__Inputs {
    return new SetAssetManagerCall__Inputs(this);
  }

  get outputs(): SetAssetManagerCall__Outputs {
    return new SetAssetManagerCall__Outputs(this);
  }
}

export class SetAssetManagerCall__Inputs {
  _call: SetAssetManagerCall;

  constructor(call: SetAssetManagerCall) {
    this._call = call;
  }

  get _assetManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAssetManagerCall__Outputs {
  _call: SetAssetManagerCall;

  constructor(call: SetAssetManagerCall) {
    this._call = call;
  }
}

export class SetCompensationManagerCall extends ethereum.Call {
  get inputs(): SetCompensationManagerCall__Inputs {
    return new SetCompensationManagerCall__Inputs(this);
  }

  get outputs(): SetCompensationManagerCall__Outputs {
    return new SetCompensationManagerCall__Outputs(this);
  }
}

export class SetCompensationManagerCall__Inputs {
  _call: SetCompensationManagerCall;

  constructor(call: SetCompensationManagerCall) {
    this._call = call;
  }

  get _compensationManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCompensationManagerCall__Outputs {
  _call: SetCompensationManagerCall;

  constructor(call: SetCompensationManagerCall) {
    this._call = call;
  }
}

export class SetConfigManagerCall extends ethereum.Call {
  get inputs(): SetConfigManagerCall__Inputs {
    return new SetConfigManagerCall__Inputs(this);
  }

  get outputs(): SetConfigManagerCall__Outputs {
    return new SetConfigManagerCall__Outputs(this);
  }
}

export class SetConfigManagerCall__Inputs {
  _call: SetConfigManagerCall;

  constructor(call: SetConfigManagerCall) {
    this._call = call;
  }

  get _configManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetConfigManagerCall__Outputs {
  _call: SetConfigManagerCall;

  constructor(call: SetConfigManagerCall) {
    this._call = call;
  }
}

export class SetFeeRatesCall extends ethereum.Call {
  get inputs(): SetFeeRatesCall__Inputs {
    return new SetFeeRatesCall__Inputs(this);
  }

  get outputs(): SetFeeRatesCall__Outputs {
    return new SetFeeRatesCall__Outputs(this);
  }
}

export class SetFeeRatesCall__Inputs {
  _call: SetFeeRatesCall;

  constructor(call: SetFeeRatesCall) {
    this._call = call;
  }

  get ethFeeRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get btcFeeRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetFeeRatesCall__Outputs {
  _call: SetFeeRatesCall;

  constructor(call: SetFeeRatesCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get btcPubKey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get btcAddress(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetRevenueAddressesCall extends ethereum.Call {
  get inputs(): SetRevenueAddressesCall__Inputs {
    return new SetRevenueAddressesCall__Inputs(this);
  }

  get outputs(): SetRevenueAddressesCall__Outputs {
    return new SetRevenueAddressesCall__Outputs(this);
  }
}

export class SetRevenueAddressesCall__Inputs {
  _call: SetRevenueAddressesCall;

  constructor(call: SetRevenueAddressesCall) {
    this._call = call;
  }

  get ethAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get btcPubKey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get btcAddress(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SetRevenueAddressesCall__Outputs {
  _call: SetRevenueAddressesCall;

  constructor(call: SetRevenueAddressesCall) {
    this._call = call;
  }
}

export class SetTransactionManagerCall extends ethereum.Call {
  get inputs(): SetTransactionManagerCall__Inputs {
    return new SetTransactionManagerCall__Inputs(this);
  }

  get outputs(): SetTransactionManagerCall__Outputs {
    return new SetTransactionManagerCall__Outputs(this);
  }
}

export class SetTransactionManagerCall__Inputs {
  _call: SetTransactionManagerCall;

  constructor(call: SetTransactionManagerCall) {
    this._call = call;
  }

  get _transactionManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTransactionManagerCall__Outputs {
  _call: SetTransactionManagerCall;

  constructor(call: SetTransactionManagerCall) {
    this._call = call;
  }
}

export class StakeERC20Call extends ethereum.Call {
  get inputs(): StakeERC20Call__Inputs {
    return new StakeERC20Call__Inputs(this);
  }

  get outputs(): StakeERC20Call__Outputs {
    return new StakeERC20Call__Outputs(this);
  }
}

export class StakeERC20Call__Inputs {
  _call: StakeERC20Call;

  constructor(call: StakeERC20Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeERC20Call__Outputs {
  _call: StakeERC20Call;

  constructor(call: StakeERC20Call) {
    this._call = call;
  }
}

export class StakeETHCall extends ethereum.Call {
  get inputs(): StakeETHCall__Inputs {
    return new StakeETHCall__Inputs(this);
  }

  get outputs(): StakeETHCall__Outputs {
    return new StakeETHCall__Outputs(this);
  }
}

export class StakeETHCall__Inputs {
  _call: StakeETHCall;

  constructor(call: StakeETHCall) {
    this._call = call;
  }
}

export class StakeETHCall__Outputs {
  _call: StakeETHCall;

  constructor(call: StakeETHCall) {
    this._call = call;
  }
}

export class StakeNFTCall extends ethereum.Call {
  get inputs(): StakeNFTCall__Inputs {
    return new StakeNFTCall__Inputs(this);
  }

  get outputs(): StakeNFTCall__Outputs {
    return new StakeNFTCall__Outputs(this);
  }
}

export class StakeNFTCall__Inputs {
  _call: StakeNFTCall;

  constructor(call: StakeNFTCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class StakeNFTCall__Outputs {
  _call: StakeNFTCall;

  constructor(call: StakeNFTCall) {
    this._call = call;
  }
}

export class TerminateArbitratorWithSlashCall extends ethereum.Call {
  get inputs(): TerminateArbitratorWithSlashCall__Inputs {
    return new TerminateArbitratorWithSlashCall__Inputs(this);
  }

  get outputs(): TerminateArbitratorWithSlashCall__Outputs {
    return new TerminateArbitratorWithSlashCall__Outputs(this);
  }
}

export class TerminateArbitratorWithSlashCall__Inputs {
  _call: TerminateArbitratorWithSlashCall;

  constructor(call: TerminateArbitratorWithSlashCall) {
    this._call = call;
  }

  get arbitrator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TerminateArbitratorWithSlashCall__Outputs {
  _call: TerminateArbitratorWithSlashCall;

  constructor(call: TerminateArbitratorWithSlashCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}
