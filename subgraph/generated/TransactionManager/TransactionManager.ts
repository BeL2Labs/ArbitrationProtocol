// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ArbitrationRequested extends ethereum.Event {
  get params(): ArbitrationRequested__Params {
    return new ArbitrationRequested__Params(this);
  }
}

export class ArbitrationRequested__Params {
  _event: ArbitrationRequested;

  constructor(event: ArbitrationRequested) {
    this._event = event;
  }

  get txId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dapp(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get arbitrator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get rawData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get script(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get timeoutCompensationReceiver(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class ArbitrationSubmitted extends ethereum.Event {
  get params(): ArbitrationSubmitted__Params {
    return new ArbitrationSubmitted__Params(this);
  }
}

export class ArbitrationSubmitted__Params {
  _event: ArbitrationSubmitted;

  constructor(event: ArbitrationSubmitted) {
    this._event = event;
  }

  get txId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dapp(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get arbitrator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get btcTxSignature(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class BTCAddressParserChanged extends ethereum.Event {
  get params(): BTCAddressParserChanged__Params {
    return new BTCAddressParserChanged__Params(this);
  }
}

export class BTCAddressParserChanged__Params {
  _event: BTCAddressParserChanged;

  constructor(event: BTCAddressParserChanged) {
    this._event = event;
  }

  get newParser(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BtcBlockHeadersChanged extends ethereum.Event {
  get params(): BtcBlockHeadersChanged__Params {
    return new BtcBlockHeadersChanged__Params(this);
  }
}

export class BtcBlockHeadersChanged__Params {
  _event: BtcBlockHeadersChanged;

  constructor(event: BtcBlockHeadersChanged) {
    this._event = event;
  }

  get newBtcBlockHeaders(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BtcUtilsChanged extends ethereum.Event {
  get params(): BtcUtilsChanged__Params {
    return new BtcUtilsChanged__Params(this);
  }
}

export class BtcUtilsChanged__Params {
  _event: BtcUtilsChanged;

  constructor(event: BtcUtilsChanged) {
    this._event = event;
  }

  get newBtcUtils(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ConfigManagerUpdated extends ethereum.Event {
  get params(): ConfigManagerUpdated__Params {
    return new ConfigManagerUpdated__Params(this);
  }
}

export class ConfigManagerUpdated__Params {
  _event: ConfigManagerUpdated;

  constructor(event: ConfigManagerUpdated) {
    this._event = event;
  }

  get newConfigManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DAppFeeTransactionSet extends ethereum.Event {
  get params(): DAppFeeTransactionSet__Params {
    return new DAppFeeTransactionSet__Params(this);
  }
}

export class DAppFeeTransactionSet__Params {
  _event: DAppFeeTransactionSet;

  constructor(event: DAppFeeTransactionSet) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get txHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get blockHeight(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DepositFeeTransfer extends ethereum.Event {
  get params(): DepositFeeTransfer__Params {
    return new DepositFeeTransfer__Params(this);
  }
}

export class DepositFeeTransfer__Params {
  _event: DepositFeeTransfer;

  constructor(event: DepositFeeTransfer) {
    this._event = event;
  }

  get txId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get revenueETHAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get arbitratorFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get systemFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get refundedFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetArbitratorManager extends ethereum.Event {
  get params(): SetArbitratorManager__Params {
    return new SetArbitratorManager__Params(this);
  }
}

export class SetArbitratorManager__Params {
  _event: SetArbitratorManager;

  constructor(event: SetArbitratorManager) {
    this._event = event;
  }

  get arbitratorManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TransactionClosedUnpaid extends ethereum.Event {
  get params(): TransactionClosedUnpaid__Params {
    return new TransactionClosedUnpaid__Params(this);
  }
}

export class TransactionClosedUnpaid__Params {
  _event: TransactionClosedUnpaid;

  constructor(event: TransactionClosedUnpaid) {
    this._event = event;
  }

  get txId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dapp(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get arbitrator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TransactionCompleted extends ethereum.Event {
  get params(): TransactionCompleted__Params {
    return new TransactionCompleted__Params(this);
  }
}

export class TransactionCompleted__Params {
  _event: TransactionCompleted;

  constructor(event: TransactionCompleted) {
    this._event = event;
  }

  get txId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dapp(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransactionRegistered extends ethereum.Event {
  get params(): TransactionRegistered__Params {
    return new TransactionRegistered__Params(this);
  }
}

export class TransactionRegistered__Params {
  _event: TransactionRegistered;

  constructor(event: TransactionRegistered) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dapp(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get arbitrator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get depositFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get btcFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get compensationReceiver(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get btcFeeAddress(): string {
    return this._event.parameters[8].value.toString();
  }
}

export class UTXOsUploaded extends ethereum.Event {
  get params(): UTXOsUploaded__Params {
    return new UTXOsUploaded__Params(this);
  }
}

export class UTXOsUploaded__Params {
  _event: UTXOsUploaded;

  constructor(event: UTXOsUploaded) {
    this._event = event;
  }

  get txId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dapp(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransactionManager__getTransactionDataByIdResultValue0Struct extends ethereum.Tuple {
  get startTime(): BigInt {
    return this[0].toBigInt();
  }

  get deadline(): BigInt {
    return this[1].toBigInt();
  }

  get requestArbitrationTime(): BigInt {
    return this[2].toBigInt();
  }

  get depositedFee(): BigInt {
    return this[3].toBigInt();
  }

  get status(): i32 {
    return this[4].toI32();
  }

  get arbitratorBtcFee(): BigInt {
    return this[5].toBigInt();
  }

  get btcFeeAddress(): string {
    return this[6].toString();
  }

  get btcFeeTxHash(): Bytes {
    return this[7].toBytes();
  }
}

export class TransactionManager__getTransactionDataByTxHashResultValue0Struct extends ethereum.Tuple {
  get startTime(): BigInt {
    return this[0].toBigInt();
  }

  get deadline(): BigInt {
    return this[1].toBigInt();
  }

  get requestArbitrationTime(): BigInt {
    return this[2].toBigInt();
  }

  get depositedFee(): BigInt {
    return this[3].toBigInt();
  }

  get status(): i32 {
    return this[4].toI32();
  }

  get arbitratorBtcFee(): BigInt {
    return this[5].toBigInt();
  }

  get btcFeeAddress(): string {
    return this[6].toString();
  }

  get btcFeeTxHash(): Bytes {
    return this[7].toBytes();
  }
}

export class TransactionManager__getTransactionPartiesByIdResultValue0Struct extends ethereum.Tuple {
  get dapp(): Address {
    return this[0].toAddress();
  }

  get arbitrator(): Address {
    return this[1].toAddress();
  }

  get compensationReceiver(): Address {
    return this[2].toAddress();
  }

  get timeoutCompensationReceiver(): Address {
    return this[3].toAddress();
  }

  get refundAddress(): Address {
    return this[4].toAddress();
  }

  get depositedFeeRefundAddress(): Address {
    return this[5].toAddress();
  }
}

export class TransactionManager__getTransactionPartiesByTxHashResultValue0Struct extends ethereum.Tuple {
  get dapp(): Address {
    return this[0].toAddress();
  }

  get arbitrator(): Address {
    return this[1].toAddress();
  }

  get compensationReceiver(): Address {
    return this[2].toAddress();
  }

  get timeoutCompensationReceiver(): Address {
    return this[3].toAddress();
  }

  get refundAddress(): Address {
    return this[4].toAddress();
  }

  get depositedFeeRefundAddress(): Address {
    return this[5].toAddress();
  }
}

export class TransactionManager__getTransactionUTXOsByIdResultValue0Struct extends ethereum.Tuple {
  get txHash(): Bytes {
    return this[0].toBytes();
  }

  get index(): BigInt {
    return this[1].toBigInt();
  }

  get script(): Bytes {
    return this[2].toBytes();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }
}

export class TransactionManager__transferArbitrationFeeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getArbitratorFee(): BigInt {
    return this.value0;
  }

  getSystemFee(): BigInt {
    return this.value1;
  }
}

export class TransactionManager extends ethereum.SmartContract {
  static bind(address: Address): TransactionManager {
    return new TransactionManager("TransactionManager", address);
  }

  arbitratorManager(): Address {
    let result = super.call(
      "arbitratorManager",
      "arbitratorManager():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_arbitratorManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "arbitratorManager",
      "arbitratorManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  btcAddressParser(): Address {
    let result = super.call(
      "btcAddressParser",
      "btcAddressParser():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_btcAddressParser(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "btcAddressParser",
      "btcAddressParser():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  btcBlockHeaders(): Address {
    let result = super.call(
      "btcBlockHeaders",
      "btcBlockHeaders():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_btcBlockHeaders(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "btcBlockHeaders",
      "btcBlockHeaders():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  btcUtils(): Address {
    let result = super.call("btcUtils", "btcUtils():(address)", []);

    return result[0].toAddress();
  }

  try_btcUtils(): ethereum.CallResult<Address> {
    let result = super.tryCall("btcUtils", "btcUtils():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  compensationManager(): Address {
    let result = super.call(
      "compensationManager",
      "compensationManager():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_compensationManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "compensationManager",
      "compensationManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  configManager(): Address {
    let result = super.call("configManager", "configManager():(address)", []);

    return result[0].toAddress();
  }

  try_configManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "configManager",
      "configManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dappRegistry(): Address {
    let result = super.call("dappRegistry", "dappRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_dappRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall("dappRegistry", "dappRegistry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTransactionBtcRawDataById(id: Bytes): Bytes {
    let result = super.call(
      "getTransactionBtcRawDataById",
      "getTransactionBtcRawDataById(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(id)],
    );

    return result[0].toBytes();
  }

  try_getTransactionBtcRawDataById(id: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTransactionBtcRawDataById",
      "getTransactionBtcRawDataById(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTransactionDataById(
    id: Bytes,
  ): TransactionManager__getTransactionDataByIdResultValue0Struct {
    let result = super.call(
      "getTransactionDataById",
      "getTransactionDataById(bytes32):((uint256,uint256,uint256,uint256,uint8,uint256,string,bytes32))",
      [ethereum.Value.fromFixedBytes(id)],
    );

    return changetype<TransactionManager__getTransactionDataByIdResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getTransactionDataById(
    id: Bytes,
  ): ethereum.CallResult<TransactionManager__getTransactionDataByIdResultValue0Struct> {
    let result = super.tryCall(
      "getTransactionDataById",
      "getTransactionDataById(bytes32):((uint256,uint256,uint256,uint256,uint8,uint256,string,bytes32))",
      [ethereum.Value.fromFixedBytes(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TransactionManager__getTransactionDataByIdResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getTransactionDataByTxHash(
    txHash: Bytes,
  ): TransactionManager__getTransactionDataByTxHashResultValue0Struct {
    let result = super.call(
      "getTransactionDataByTxHash",
      "getTransactionDataByTxHash(bytes32):((uint256,uint256,uint256,uint256,uint8,uint256,string,bytes32))",
      [ethereum.Value.fromFixedBytes(txHash)],
    );

    return changetype<TransactionManager__getTransactionDataByTxHashResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getTransactionDataByTxHash(
    txHash: Bytes,
  ): ethereum.CallResult<TransactionManager__getTransactionDataByTxHashResultValue0Struct> {
    let result = super.tryCall(
      "getTransactionDataByTxHash",
      "getTransactionDataByTxHash(bytes32):((uint256,uint256,uint256,uint256,uint8,uint256,string,bytes32))",
      [ethereum.Value.fromFixedBytes(txHash)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TransactionManager__getTransactionDataByTxHashResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getTransactionPartiesById(
    id: Bytes,
  ): TransactionManager__getTransactionPartiesByIdResultValue0Struct {
    let result = super.call(
      "getTransactionPartiesById",
      "getTransactionPartiesById(bytes32):((address,address,address,address,address,address))",
      [ethereum.Value.fromFixedBytes(id)],
    );

    return changetype<TransactionManager__getTransactionPartiesByIdResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getTransactionPartiesById(
    id: Bytes,
  ): ethereum.CallResult<TransactionManager__getTransactionPartiesByIdResultValue0Struct> {
    let result = super.tryCall(
      "getTransactionPartiesById",
      "getTransactionPartiesById(bytes32):((address,address,address,address,address,address))",
      [ethereum.Value.fromFixedBytes(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TransactionManager__getTransactionPartiesByIdResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getTransactionPartiesByTxHash(
    txHash: Bytes,
  ): TransactionManager__getTransactionPartiesByTxHashResultValue0Struct {
    let result = super.call(
      "getTransactionPartiesByTxHash",
      "getTransactionPartiesByTxHash(bytes32):((address,address,address,address,address,address))",
      [ethereum.Value.fromFixedBytes(txHash)],
    );

    return changetype<TransactionManager__getTransactionPartiesByTxHashResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getTransactionPartiesByTxHash(
    txHash: Bytes,
  ): ethereum.CallResult<TransactionManager__getTransactionPartiesByTxHashResultValue0Struct> {
    let result = super.tryCall(
      "getTransactionPartiesByTxHash",
      "getTransactionPartiesByTxHash(bytes32):((address,address,address,address,address,address))",
      [ethereum.Value.fromFixedBytes(txHash)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TransactionManager__getTransactionPartiesByTxHashResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getTransactionSignHashById(id: Bytes): Bytes {
    let result = super.call(
      "getTransactionSignHashById",
      "getTransactionSignHashById(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(id)],
    );

    return result[0].toBytes();
  }

  try_getTransactionSignHashById(id: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTransactionSignHashById",
      "getTransactionSignHashById(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTransactionSignatureById(id: Bytes): Bytes {
    let result = super.call(
      "getTransactionSignatureById",
      "getTransactionSignatureById(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(id)],
    );

    return result[0].toBytes();
  }

  try_getTransactionSignatureById(id: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTransactionSignatureById",
      "getTransactionSignatureById(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTransactionSignatureByTxHash(txHash: Bytes): Bytes {
    let result = super.call(
      "getTransactionSignatureByTxHash",
      "getTransactionSignatureByTxHash(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(txHash)],
    );

    return result[0].toBytes();
  }

  try_getTransactionSignatureByTxHash(
    txHash: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTransactionSignatureByTxHash",
      "getTransactionSignatureByTxHash(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(txHash)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTransactionStatus(id: Bytes): i32 {
    let result = super.call(
      "getTransactionStatus",
      "getTransactionStatus(bytes32):(uint8)",
      [ethereum.Value.fromFixedBytes(id)],
    );

    return result[0].toI32();
  }

  try_getTransactionStatus(id: Bytes): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getTransactionStatus",
      "getTransactionStatus(bytes32):(uint8)",
      [ethereum.Value.fromFixedBytes(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getTransactionUTXOScriptById(id: Bytes): Bytes {
    let result = super.call(
      "getTransactionUTXOScriptById",
      "getTransactionUTXOScriptById(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(id)],
    );

    return result[0].toBytes();
  }

  try_getTransactionUTXOScriptById(id: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTransactionUTXOScriptById",
      "getTransactionUTXOScriptById(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTransactionUTXOsById(
    id: Bytes,
  ): Array<TransactionManager__getTransactionUTXOsByIdResultValue0Struct> {
    let result = super.call(
      "getTransactionUTXOsById",
      "getTransactionUTXOsById(bytes32):((bytes32,uint32,bytes,uint256)[])",
      [ethereum.Value.fromFixedBytes(id)],
    );

    return result[0].toTupleArray<TransactionManager__getTransactionUTXOsByIdResultValue0Struct>();
  }

  try_getTransactionUTXOsById(
    id: Bytes,
  ): ethereum.CallResult<
    Array<TransactionManager__getTransactionUTXOsByIdResultValue0Struct>
  > {
    let result = super.tryCall(
      "getTransactionUTXOsById",
      "getTransactionUTXOsById(bytes32):((bytes32,uint32,bytes,uint256)[])",
      [ethereum.Value.fromFixedBytes(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<TransactionManager__getTransactionUTXOsByIdResultValue0Struct>(),
    );
  }

  isAbleCompletedTransaction(id: Bytes): boolean {
    let result = super.call(
      "isAbleCompletedTransaction",
      "isAbleCompletedTransaction(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(id)],
    );

    return result[0].toBoolean();
  }

  try_isAbleCompletedTransaction(id: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAbleCompletedTransaction",
      "isAbleCompletedTransaction(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transactionSignData(param0: Bytes): Bytes {
    let result = super.call(
      "transactionSignData",
      "transactionSignData(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toBytes();
  }

  try_transactionSignData(param0: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "transactionSignData",
      "transactionSignData(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  transferArbitrationFee(
    id: Bytes,
  ): TransactionManager__transferArbitrationFeeResult {
    let result = super.call(
      "transferArbitrationFee",
      "transferArbitrationFee(bytes32):(uint256,uint256)",
      [ethereum.Value.fromFixedBytes(id)],
    );

    return new TransactionManager__transferArbitrationFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_transferArbitrationFee(
    id: Bytes,
  ): ethereum.CallResult<TransactionManager__transferArbitrationFeeResult> {
    let result = super.tryCall(
      "transferArbitrationFee",
      "transferArbitrationFee(bytes32):(uint256,uint256)",
      [ethereum.Value.fromFixedBytes(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TransactionManager__transferArbitrationFeeResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  txHashToId(param0: Bytes): Bytes {
    let result = super.call("txHashToId", "txHashToId(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toBytes();
  }

  try_txHashToId(param0: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("txHashToId", "txHashToId(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloseUnpaidTransactionCall extends ethereum.Call {
  get inputs(): CloseUnpaidTransactionCall__Inputs {
    return new CloseUnpaidTransactionCall__Inputs(this);
  }

  get outputs(): CloseUnpaidTransactionCall__Outputs {
    return new CloseUnpaidTransactionCall__Outputs(this);
  }
}

export class CloseUnpaidTransactionCall__Inputs {
  _call: CloseUnpaidTransactionCall;

  constructor(call: CloseUnpaidTransactionCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CloseUnpaidTransactionCall__Outputs {
  _call: CloseUnpaidTransactionCall;

  constructor(call: CloseUnpaidTransactionCall) {
    this._call = call;
  }
}

export class CompleteTransactionCall extends ethereum.Call {
  get inputs(): CompleteTransactionCall__Inputs {
    return new CompleteTransactionCall__Inputs(this);
  }

  get outputs(): CompleteTransactionCall__Outputs {
    return new CompleteTransactionCall__Outputs(this);
  }
}

export class CompleteTransactionCall__Inputs {
  _call: CompleteTransactionCall;

  constructor(call: CompleteTransactionCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CompleteTransactionCall__Outputs {
  _call: CompleteTransactionCall;

  constructor(call: CompleteTransactionCall) {
    this._call = call;
  }
}

export class CompleteTransactionWithSlashCall extends ethereum.Call {
  get inputs(): CompleteTransactionWithSlashCall__Inputs {
    return new CompleteTransactionWithSlashCall__Inputs(this);
  }

  get outputs(): CompleteTransactionWithSlashCall__Outputs {
    return new CompleteTransactionWithSlashCall__Outputs(this);
  }
}

export class CompleteTransactionWithSlashCall__Inputs {
  _call: CompleteTransactionWithSlashCall;

  constructor(call: CompleteTransactionWithSlashCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get receivedCompensationAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CompleteTransactionWithSlashCall__Outputs {
  _call: CompleteTransactionWithSlashCall;

  constructor(call: CompleteTransactionWithSlashCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _arbitratorManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _dappRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _configManager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _compensationManager(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _btcUtils(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _btcAddressParser(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _btcBlockHeaders(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RegisterTransactionCall extends ethereum.Call {
  get inputs(): RegisterTransactionCall__Inputs {
    return new RegisterTransactionCall__Inputs(this);
  }

  get outputs(): RegisterTransactionCall__Outputs {
    return new RegisterTransactionCall__Outputs(this);
  }
}

export class RegisterTransactionCall__Inputs {
  _call: RegisterTransactionCall;

  constructor(call: RegisterTransactionCall) {
    this._call = call;
  }

  get data(): RegisterTransactionCallDataStruct {
    return changetype<RegisterTransactionCallDataStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class RegisterTransactionCall__Outputs {
  _call: RegisterTransactionCall;

  constructor(call: RegisterTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }

  get value1(): string {
    return this._call.outputValues[1].value.toString();
  }
}

export class RegisterTransactionCallDataStruct extends ethereum.Tuple {
  get arbitrator(): Address {
    return this[0].toAddress();
  }

  get deadline(): BigInt {
    return this[1].toBigInt();
  }

  get compensationReceiver(): Address {
    return this[2].toAddress();
  }

  get refundAddress(): Address {
    return this[3].toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestArbitrationCall extends ethereum.Call {
  get inputs(): RequestArbitrationCall__Inputs {
    return new RequestArbitrationCall__Inputs(this);
  }

  get outputs(): RequestArbitrationCall__Outputs {
    return new RequestArbitrationCall__Outputs(this);
  }
}

export class RequestArbitrationCall__Inputs {
  _call: RequestArbitrationCall;

  constructor(call: RequestArbitrationCall) {
    this._call = call;
  }

  get data(): RequestArbitrationCallDataStruct {
    return changetype<RequestArbitrationCallDataStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class RequestArbitrationCall__Outputs {
  _call: RequestArbitrationCall;

  constructor(call: RequestArbitrationCall) {
    this._call = call;
  }
}

export class RequestArbitrationCallDataStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get rawData(): Bytes {
    return this[1].toBytes();
  }

  get signDataType(): i32 {
    return this[2].toI32();
  }

  get signHashFlag(): i32 {
    return this[3].toI32();
  }

  get script(): Bytes {
    return this[4].toBytes();
  }

  get timeoutCompensationReceiver(): Address {
    return this[5].toAddress();
  }
}

export class SetArbitratorManagerCall extends ethereum.Call {
  get inputs(): SetArbitratorManagerCall__Inputs {
    return new SetArbitratorManagerCall__Inputs(this);
  }

  get outputs(): SetArbitratorManagerCall__Outputs {
    return new SetArbitratorManagerCall__Outputs(this);
  }
}

export class SetArbitratorManagerCall__Inputs {
  _call: SetArbitratorManagerCall;

  constructor(call: SetArbitratorManagerCall) {
    this._call = call;
  }

  get _arbitratorManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetArbitratorManagerCall__Outputs {
  _call: SetArbitratorManagerCall;

  constructor(call: SetArbitratorManagerCall) {
    this._call = call;
  }
}

export class SetBTCAddressParserCall extends ethereum.Call {
  get inputs(): SetBTCAddressParserCall__Inputs {
    return new SetBTCAddressParserCall__Inputs(this);
  }

  get outputs(): SetBTCAddressParserCall__Outputs {
    return new SetBTCAddressParserCall__Outputs(this);
  }
}

export class SetBTCAddressParserCall__Inputs {
  _call: SetBTCAddressParserCall;

  constructor(call: SetBTCAddressParserCall) {
    this._call = call;
  }

  get _btcAddressParser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBTCAddressParserCall__Outputs {
  _call: SetBTCAddressParserCall;

  constructor(call: SetBTCAddressParserCall) {
    this._call = call;
  }
}

export class SetBtcBlockHeadersCall extends ethereum.Call {
  get inputs(): SetBtcBlockHeadersCall__Inputs {
    return new SetBtcBlockHeadersCall__Inputs(this);
  }

  get outputs(): SetBtcBlockHeadersCall__Outputs {
    return new SetBtcBlockHeadersCall__Outputs(this);
  }
}

export class SetBtcBlockHeadersCall__Inputs {
  _call: SetBtcBlockHeadersCall;

  constructor(call: SetBtcBlockHeadersCall) {
    this._call = call;
  }

  get _btcBlockHeaders(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBtcBlockHeadersCall__Outputs {
  _call: SetBtcBlockHeadersCall;

  constructor(call: SetBtcBlockHeadersCall) {
    this._call = call;
  }
}

export class SetBtcUtilsCall extends ethereum.Call {
  get inputs(): SetBtcUtilsCall__Inputs {
    return new SetBtcUtilsCall__Inputs(this);
  }

  get outputs(): SetBtcUtilsCall__Outputs {
    return new SetBtcUtilsCall__Outputs(this);
  }
}

export class SetBtcUtilsCall__Inputs {
  _call: SetBtcUtilsCall;

  constructor(call: SetBtcUtilsCall) {
    this._call = call;
  }

  get _btcUtils(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBtcUtilsCall__Outputs {
  _call: SetBtcUtilsCall;

  constructor(call: SetBtcUtilsCall) {
    this._call = call;
  }
}

export class SetConfigManagerCall extends ethereum.Call {
  get inputs(): SetConfigManagerCall__Inputs {
    return new SetConfigManagerCall__Inputs(this);
  }

  get outputs(): SetConfigManagerCall__Outputs {
    return new SetConfigManagerCall__Outputs(this);
  }
}

export class SetConfigManagerCall__Inputs {
  _call: SetConfigManagerCall;

  constructor(call: SetConfigManagerCall) {
    this._call = call;
  }

  get _configManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetConfigManagerCall__Outputs {
  _call: SetConfigManagerCall;

  constructor(call: SetConfigManagerCall) {
    this._call = call;
  }
}

export class SetDAppBtcFeeTransactionCall extends ethereum.Call {
  get inputs(): SetDAppBtcFeeTransactionCall__Inputs {
    return new SetDAppBtcFeeTransactionCall__Inputs(this);
  }

  get outputs(): SetDAppBtcFeeTransactionCall__Outputs {
    return new SetDAppBtcFeeTransactionCall__Outputs(this);
  }
}

export class SetDAppBtcFeeTransactionCall__Inputs {
  _call: SetDAppBtcFeeTransactionCall;

  constructor(call: SetDAppBtcFeeTransactionCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get rawData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get index(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get blockHeight(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetDAppBtcFeeTransactionCall__Outputs {
  _call: SetDAppBtcFeeTransactionCall;

  constructor(call: SetDAppBtcFeeTransactionCall) {
    this._call = call;
  }
}

export class SubmitArbitrationCall extends ethereum.Call {
  get inputs(): SubmitArbitrationCall__Inputs {
    return new SubmitArbitrationCall__Inputs(this);
  }

  get outputs(): SubmitArbitrationCall__Outputs {
    return new SubmitArbitrationCall__Outputs(this);
  }
}

export class SubmitArbitrationCall__Inputs {
  _call: SubmitArbitrationCall;

  constructor(call: SubmitArbitrationCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get btcTxSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SubmitArbitrationCall__Outputs {
  _call: SubmitArbitrationCall;

  constructor(call: SubmitArbitrationCall) {
    this._call = call;
  }
}

export class TransferArbitrationFeeCall extends ethereum.Call {
  get inputs(): TransferArbitrationFeeCall__Inputs {
    return new TransferArbitrationFeeCall__Inputs(this);
  }

  get outputs(): TransferArbitrationFeeCall__Outputs {
    return new TransferArbitrationFeeCall__Outputs(this);
  }
}

export class TransferArbitrationFeeCall__Inputs {
  _call: TransferArbitrationFeeCall;

  constructor(call: TransferArbitrationFeeCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class TransferArbitrationFeeCall__Outputs {
  _call: TransferArbitrationFeeCall;

  constructor(call: TransferArbitrationFeeCall) {
    this._call = call;
  }

  get arbitratorFee(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get systemFee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UploadUTXOsCall extends ethereum.Call {
  get inputs(): UploadUTXOsCall__Inputs {
    return new UploadUTXOsCall__Inputs(this);
  }

  get outputs(): UploadUTXOsCall__Outputs {
    return new UploadUTXOsCall__Outputs(this);
  }
}

export class UploadUTXOsCall__Inputs {
  _call: UploadUTXOsCall;

  constructor(call: UploadUTXOsCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get utxos(): Array<UploadUTXOsCallUtxosStruct> {
    return this._call.inputValues[1].value.toTupleArray<UploadUTXOsCallUtxosStruct>();
  }

  get lockScript(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UploadUTXOsCall__Outputs {
  _call: UploadUTXOsCall;

  constructor(call: UploadUTXOsCall) {
    this._call = call;
  }
}

export class UploadUTXOsCallUtxosStruct extends ethereum.Tuple {
  get txHash(): Bytes {
    return this[0].toBytes();
  }

  get index(): BigInt {
    return this[1].toBigInt();
  }

  get script(): Bytes {
    return this[2].toBytes();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }
}
