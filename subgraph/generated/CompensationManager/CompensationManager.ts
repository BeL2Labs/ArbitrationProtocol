// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ArbitratorManagerUpdated extends ethereum.Event {
  get params(): ArbitratorManagerUpdated__Params {
    return new ArbitratorManagerUpdated__Params(this);
  }
}

export class ArbitratorManagerUpdated__Params {
  _event: ArbitratorManagerUpdated;

  constructor(event: ArbitratorManagerUpdated) {
    this._event = event;
  }

  get newArbitratorManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CompensationClaimed extends ethereum.Event {
  get params(): CompensationClaimed__Params {
    return new CompensationClaimed__Params(this);
  }
}

export class CompensationClaimed__Params {
  _event: CompensationClaimed;

  constructor(event: CompensationClaimed) {
    this._event = event;
  }

  get claimId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get claimer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get claimType(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class CompensationWithdrawn extends ethereum.Event {
  get params(): CompensationWithdrawn__Params {
    return new CompensationWithdrawn__Params(this);
  }
}

export class CompensationWithdrawn__Params {
  _event: CompensationWithdrawn;

  constructor(event: CompensationWithdrawn) {
    this._event = event;
  }

  get claimId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ConfigManagerUpdated extends ethereum.Event {
  get params(): ConfigManagerUpdated__Params {
    return new ConfigManagerUpdated__Params(this);
  }
}

export class ConfigManagerUpdated__Params {
  _event: ConfigManagerUpdated;

  constructor(event: ConfigManagerUpdated) {
    this._event = event;
  }

  get newConfigManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransactionManagerUpdated extends ethereum.Event {
  get params(): TransactionManagerUpdated__Params {
    return new TransactionManagerUpdated__Params(this);
  }
}

export class TransactionManagerUpdated__Params {
  _event: TransactionManagerUpdated;

  constructor(event: TransactionManagerUpdated) {
    this._event = event;
  }

  get newTransactionManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ZkServiceUpdated extends ethereum.Event {
  get params(): ZkServiceUpdated__Params {
    return new ZkServiceUpdated__Params(this);
  }
}

export class ZkServiceUpdated__Params {
  _event: ZkServiceUpdated;

  constructor(event: ZkServiceUpdated) {
    this._event = event;
  }

  get newZkService(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CompensationManager__claimsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: boolean;
  value6: i32;
  value7: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: boolean,
    value6: i32,
    value7: Address,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6)),
    );
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    return map;
  }

  getClaimer(): Address {
    return this.value0;
  }

  getArbitrator(): Address {
    return this.value1;
  }

  getEthAmount(): BigInt {
    return this.value2;
  }

  getNftContract(): Address {
    return this.value3;
  }

  getTotalAmount(): BigInt {
    return this.value4;
  }

  getWithdrawn(): boolean {
    return this.value5;
  }

  getClaimType(): i32 {
    return this.value6;
  }

  getReceivedCompensationAddress(): Address {
    return this.value7;
  }
}

export class CompensationManager extends ethereum.SmartContract {
  static bind(address: Address): CompensationManager {
    return new CompensationManager("CompensationManager", address);
  }

  arbitratorManager(): Address {
    let result = super.call(
      "arbitratorManager",
      "arbitratorManager():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_arbitratorManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "arbitratorManager",
      "arbitratorManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  claimArbitratorFee(txId: Bytes): Bytes {
    let result = super.call(
      "claimArbitratorFee",
      "claimArbitratorFee(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(txId)],
    );

    return result[0].toBytes();
  }

  try_claimArbitratorFee(txId: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "claimArbitratorFee",
      "claimArbitratorFee(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(txId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  claimFailedArbitrationCompensation(btcTx: Bytes, evidence: Bytes): Bytes {
    let result = super.call(
      "claimFailedArbitrationCompensation",
      "claimFailedArbitrationCompensation(bytes,bytes32):(bytes32)",
      [
        ethereum.Value.fromBytes(btcTx),
        ethereum.Value.fromFixedBytes(evidence),
      ],
    );

    return result[0].toBytes();
  }

  try_claimFailedArbitrationCompensation(
    btcTx: Bytes,
    evidence: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "claimFailedArbitrationCompensation",
      "claimFailedArbitrationCompensation(bytes,bytes32):(bytes32)",
      [
        ethereum.Value.fromBytes(btcTx),
        ethereum.Value.fromFixedBytes(evidence),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  claimIllegalSignatureCompensation(
    arbitrator: Address,
    btcTx: Bytes,
    evidence: Bytes,
  ): Bytes {
    let result = super.call(
      "claimIllegalSignatureCompensation",
      "claimIllegalSignatureCompensation(address,bytes,bytes32):(bytes32)",
      [
        ethereum.Value.fromAddress(arbitrator),
        ethereum.Value.fromBytes(btcTx),
        ethereum.Value.fromFixedBytes(evidence),
      ],
    );

    return result[0].toBytes();
  }

  try_claimIllegalSignatureCompensation(
    arbitrator: Address,
    btcTx: Bytes,
    evidence: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "claimIllegalSignatureCompensation",
      "claimIllegalSignatureCompensation(address,bytes,bytes32):(bytes32)",
      [
        ethereum.Value.fromAddress(arbitrator),
        ethereum.Value.fromBytes(btcTx),
        ethereum.Value.fromFixedBytes(evidence),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  claimTimeoutCompensation(id: Bytes): Bytes {
    let result = super.call(
      "claimTimeoutCompensation",
      "claimTimeoutCompensation(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(id)],
    );

    return result[0].toBytes();
  }

  try_claimTimeoutCompensation(id: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "claimTimeoutCompensation",
      "claimTimeoutCompensation(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  claims(param0: Bytes): CompensationManager__claimsResult {
    let result = super.call(
      "claims",
      "claims(bytes32):(address,address,uint256,address,uint256,bool,uint8,address)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new CompensationManager__claimsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toI32(),
      result[7].toAddress(),
    );
  }

  try_claims(
    param0: Bytes,
  ): ethereum.CallResult<CompensationManager__claimsResult> {
    let result = super.tryCall(
      "claims",
      "claims(bytes32):(address,address,uint256,address,uint256,bool,uint8,address)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CompensationManager__claimsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toI32(),
        value[7].toAddress(),
      ),
    );
  }

  configManager(): Address {
    let result = super.call("configManager", "configManager():(address)", []);

    return result[0].toAddress();
  }

  try_configManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "configManager",
      "configManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getClaimableAmount(claimId: Bytes): BigInt {
    let result = super.call(
      "getClaimableAmount",
      "getClaimableAmount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(claimId)],
    );

    return result[0].toBigInt();
  }

  try_getClaimableAmount(claimId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimableAmount",
      "getClaimableAmount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(claimId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transactionManager(): Address {
    let result = super.call(
      "transactionManager",
      "transactionManager():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_transactionManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "transactionManager",
      "transactionManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  zkService(): Address {
    let result = super.call("zkService", "zkService():(address)", []);

    return result[0].toAddress();
  }

  try_zkService(): ethereum.CallResult<Address> {
    let result = super.tryCall("zkService", "zkService():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimArbitratorFeeCall extends ethereum.Call {
  get inputs(): ClaimArbitratorFeeCall__Inputs {
    return new ClaimArbitratorFeeCall__Inputs(this);
  }

  get outputs(): ClaimArbitratorFeeCall__Outputs {
    return new ClaimArbitratorFeeCall__Outputs(this);
  }
}

export class ClaimArbitratorFeeCall__Inputs {
  _call: ClaimArbitratorFeeCall;

  constructor(call: ClaimArbitratorFeeCall) {
    this._call = call;
  }

  get txId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ClaimArbitratorFeeCall__Outputs {
  _call: ClaimArbitratorFeeCall;

  constructor(call: ClaimArbitratorFeeCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ClaimFailedArbitrationCompensationCall extends ethereum.Call {
  get inputs(): ClaimFailedArbitrationCompensationCall__Inputs {
    return new ClaimFailedArbitrationCompensationCall__Inputs(this);
  }

  get outputs(): ClaimFailedArbitrationCompensationCall__Outputs {
    return new ClaimFailedArbitrationCompensationCall__Outputs(this);
  }
}

export class ClaimFailedArbitrationCompensationCall__Inputs {
  _call: ClaimFailedArbitrationCompensationCall;

  constructor(call: ClaimFailedArbitrationCompensationCall) {
    this._call = call;
  }

  get btcTx(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get evidence(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ClaimFailedArbitrationCompensationCall__Outputs {
  _call: ClaimFailedArbitrationCompensationCall;

  constructor(call: ClaimFailedArbitrationCompensationCall) {
    this._call = call;
  }

  get claimId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ClaimIllegalSignatureCompensationCall extends ethereum.Call {
  get inputs(): ClaimIllegalSignatureCompensationCall__Inputs {
    return new ClaimIllegalSignatureCompensationCall__Inputs(this);
  }

  get outputs(): ClaimIllegalSignatureCompensationCall__Outputs {
    return new ClaimIllegalSignatureCompensationCall__Outputs(this);
  }
}

export class ClaimIllegalSignatureCompensationCall__Inputs {
  _call: ClaimIllegalSignatureCompensationCall;

  constructor(call: ClaimIllegalSignatureCompensationCall) {
    this._call = call;
  }

  get arbitrator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get btcTx(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get evidence(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ClaimIllegalSignatureCompensationCall__Outputs {
  _call: ClaimIllegalSignatureCompensationCall;

  constructor(call: ClaimIllegalSignatureCompensationCall) {
    this._call = call;
  }

  get claimId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ClaimTimeoutCompensationCall extends ethereum.Call {
  get inputs(): ClaimTimeoutCompensationCall__Inputs {
    return new ClaimTimeoutCompensationCall__Inputs(this);
  }

  get outputs(): ClaimTimeoutCompensationCall__Outputs {
    return new ClaimTimeoutCompensationCall__Outputs(this);
  }
}

export class ClaimTimeoutCompensationCall__Inputs {
  _call: ClaimTimeoutCompensationCall;

  constructor(call: ClaimTimeoutCompensationCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ClaimTimeoutCompensationCall__Outputs {
  _call: ClaimTimeoutCompensationCall;

  constructor(call: ClaimTimeoutCompensationCall) {
    this._call = call;
  }

  get claimId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _zkService(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _transactionManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _configManager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _arbitratorManager(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetArbitratorManagerCall extends ethereum.Call {
  get inputs(): SetArbitratorManagerCall__Inputs {
    return new SetArbitratorManagerCall__Inputs(this);
  }

  get outputs(): SetArbitratorManagerCall__Outputs {
    return new SetArbitratorManagerCall__Outputs(this);
  }
}

export class SetArbitratorManagerCall__Inputs {
  _call: SetArbitratorManagerCall;

  constructor(call: SetArbitratorManagerCall) {
    this._call = call;
  }

  get _arbitratorManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetArbitratorManagerCall__Outputs {
  _call: SetArbitratorManagerCall;

  constructor(call: SetArbitratorManagerCall) {
    this._call = call;
  }
}

export class SetConfigManagerCall extends ethereum.Call {
  get inputs(): SetConfigManagerCall__Inputs {
    return new SetConfigManagerCall__Inputs(this);
  }

  get outputs(): SetConfigManagerCall__Outputs {
    return new SetConfigManagerCall__Outputs(this);
  }
}

export class SetConfigManagerCall__Inputs {
  _call: SetConfigManagerCall;

  constructor(call: SetConfigManagerCall) {
    this._call = call;
  }

  get _configManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetConfigManagerCall__Outputs {
  _call: SetConfigManagerCall;

  constructor(call: SetConfigManagerCall) {
    this._call = call;
  }
}

export class SetTransactionManagerCall extends ethereum.Call {
  get inputs(): SetTransactionManagerCall__Inputs {
    return new SetTransactionManagerCall__Inputs(this);
  }

  get outputs(): SetTransactionManagerCall__Outputs {
    return new SetTransactionManagerCall__Outputs(this);
  }
}

export class SetTransactionManagerCall__Inputs {
  _call: SetTransactionManagerCall;

  constructor(call: SetTransactionManagerCall) {
    this._call = call;
  }

  get _transactionManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTransactionManagerCall__Outputs {
  _call: SetTransactionManagerCall;

  constructor(call: SetTransactionManagerCall) {
    this._call = call;
  }
}

export class SetZkServiceCall extends ethereum.Call {
  get inputs(): SetZkServiceCall__Inputs {
    return new SetZkServiceCall__Inputs(this);
  }

  get outputs(): SetZkServiceCall__Outputs {
    return new SetZkServiceCall__Outputs(this);
  }
}

export class SetZkServiceCall__Inputs {
  _call: SetZkServiceCall;

  constructor(call: SetZkServiceCall) {
    this._call = call;
  }

  get _zkService(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetZkServiceCall__Outputs {
  _call: SetZkServiceCall;

  constructor(call: SetZkServiceCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCompensationCall extends ethereum.Call {
  get inputs(): WithdrawCompensationCall__Inputs {
    return new WithdrawCompensationCall__Inputs(this);
  }

  get outputs(): WithdrawCompensationCall__Outputs {
    return new WithdrawCompensationCall__Outputs(this);
  }
}

export class WithdrawCompensationCall__Inputs {
  _call: WithdrawCompensationCall;

  constructor(call: WithdrawCompensationCall) {
    this._call = call;
  }

  get claimId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class WithdrawCompensationCall__Outputs {
  _call: WithdrawCompensationCall;

  constructor(call: WithdrawCompensationCall) {
    this._call = call;
  }
}
