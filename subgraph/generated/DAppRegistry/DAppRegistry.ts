// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ConfigManagerUpdated extends ethereum.Event {
  get params(): ConfigManagerUpdated__Params {
    return new ConfigManagerUpdated__Params(this);
  }
}

export class ConfigManagerUpdated__Params {
  _event: ConfigManagerUpdated;

  constructor(event: ConfigManagerUpdated) {
    this._event = event;
  }

  get oldConfigManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newConfigManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DAppAuthorized extends ethereum.Event {
  get params(): DAppAuthorized__Params {
    return new DAppAuthorized__Params(this);
  }
}

export class DAppAuthorized__Params {
  _event: DAppAuthorized;

  constructor(event: DAppAuthorized) {
    this._event = event;
  }

  get dapp(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DAppDeregistered extends ethereum.Event {
  get params(): DAppDeregistered__Params {
    return new DAppDeregistered__Params(this);
  }
}

export class DAppDeregistered__Params {
  _event: DAppDeregistered;

  constructor(event: DAppDeregistered) {
    this._event = event;
  }

  get dapp(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DAppRegistered extends ethereum.Event {
  get params(): DAppRegistered__Params {
    return new DAppRegistered__Params(this);
  }
}

export class DAppRegistered__Params {
  _event: DAppRegistered;

  constructor(event: DAppRegistered) {
    this._event = event;
  }

  get dapp(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DAppSuspended extends ethereum.Event {
  get params(): DAppSuspended__Params {
    return new DAppSuspended__Params(this);
  }
}

export class DAppSuspended__Params {
  _event: DAppSuspended;

  constructor(event: DAppSuspended) {
    this._event = event;
  }

  get dapp(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DAppRegistry extends ethereum.SmartContract {
  static bind(address: Address): DAppRegistry {
    return new DAppRegistry("DAppRegistry", address);
  }

  REGISTRATION_FEE(): BigInt {
    let result = super.call(
      "REGISTRATION_FEE",
      "REGISTRATION_FEE():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_REGISTRATION_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REGISTRATION_FEE",
      "REGISTRATION_FEE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  configManager(): Address {
    let result = super.call("configManager", "configManager():(address)", []);

    return result[0].toAddress();
  }

  try_configManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "configManager",
      "configManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDAppOwner(dapp: Address): Address {
    let result = super.call("getDAppOwner", "getDAppOwner(address):(address)", [
      ethereum.Value.fromAddress(dapp),
    ]);

    return result[0].toAddress();
  }

  try_getDAppOwner(dapp: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDAppOwner",
      "getDAppOwner(address):(address)",
      [ethereum.Value.fromAddress(dapp)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDAppStatus(dapp: Address): i32 {
    let result = super.call("getDAppStatus", "getDAppStatus(address):(uint8)", [
      ethereum.Value.fromAddress(dapp),
    ]);

    return result[0].toI32();
  }

  try_getDAppStatus(dapp: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getDAppStatus",
      "getDAppStatus(address):(uint8)",
      [ethereum.Value.fromAddress(dapp)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isActiveDApp(dapp: Address): boolean {
    let result = super.call("isActiveDApp", "isActiveDApp(address):(bool)", [
      ethereum.Value.fromAddress(dapp),
    ]);

    return result[0].toBoolean();
  }

  try_isActiveDApp(dapp: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActiveDApp", "isActiveDApp(address):(bool)", [
      ethereum.Value.fromAddress(dapp),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRegistered(dapp: Address): boolean {
    let result = super.call("isRegistered", "isRegistered(address):(bool)", [
      ethereum.Value.fromAddress(dapp),
    ]);

    return result[0].toBoolean();
  }

  try_isRegistered(dapp: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRegistered", "isRegistered(address):(bool)", [
      ethereum.Value.fromAddress(dapp),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuthorizeDAppCall extends ethereum.Call {
  get inputs(): AuthorizeDAppCall__Inputs {
    return new AuthorizeDAppCall__Inputs(this);
  }

  get outputs(): AuthorizeDAppCall__Outputs {
    return new AuthorizeDAppCall__Outputs(this);
  }
}

export class AuthorizeDAppCall__Inputs {
  _call: AuthorizeDAppCall;

  constructor(call: AuthorizeDAppCall) {
    this._call = call;
  }

  get dapp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AuthorizeDAppCall__Outputs {
  _call: AuthorizeDAppCall;

  constructor(call: AuthorizeDAppCall) {
    this._call = call;
  }
}

export class DeregisterDAppCall extends ethereum.Call {
  get inputs(): DeregisterDAppCall__Inputs {
    return new DeregisterDAppCall__Inputs(this);
  }

  get outputs(): DeregisterDAppCall__Outputs {
    return new DeregisterDAppCall__Outputs(this);
  }
}

export class DeregisterDAppCall__Inputs {
  _call: DeregisterDAppCall;

  constructor(call: DeregisterDAppCall) {
    this._call = call;
  }

  get dapp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeregisterDAppCall__Outputs {
  _call: DeregisterDAppCall;

  constructor(call: DeregisterDAppCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _configManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RegisterDAppCall extends ethereum.Call {
  get inputs(): RegisterDAppCall__Inputs {
    return new RegisterDAppCall__Inputs(this);
  }

  get outputs(): RegisterDAppCall__Outputs {
    return new RegisterDAppCall__Outputs(this);
  }
}

export class RegisterDAppCall__Inputs {
  _call: RegisterDAppCall;

  constructor(call: RegisterDAppCall) {
    this._call = call;
  }

  get dappContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterDAppCall__Outputs {
  _call: RegisterDAppCall;

  constructor(call: RegisterDAppCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetConfigManagerCall extends ethereum.Call {
  get inputs(): SetConfigManagerCall__Inputs {
    return new SetConfigManagerCall__Inputs(this);
  }

  get outputs(): SetConfigManagerCall__Outputs {
    return new SetConfigManagerCall__Outputs(this);
  }
}

export class SetConfigManagerCall__Inputs {
  _call: SetConfigManagerCall;

  constructor(call: SetConfigManagerCall) {
    this._call = call;
  }

  get _configManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetConfigManagerCall__Outputs {
  _call: SetConfigManagerCall;

  constructor(call: SetConfigManagerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
